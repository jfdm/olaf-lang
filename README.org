#+TITLE: Olaf

I am interested in teaching /programming language design, implementation, and theory/ (PLDI).
As part of this endeavour I try to get student projects to help think about interactive environments covering for students to explore interesting topics in PLDI.
In the past I have let my students explore their own set of extensions to the STLC, however, I have decided to codify my own set of extensions to the STLC, and present a verified reference implementation and well-typed interpreter for students to gain a feel for the language they are realising environments for.

This is Olaf.

* Design

  Olaf is a pure functional language based on the Simply-Typed Lambda Calculus.
  There are:

  + anonymous functions
  + variables
  + function application

  Olaf supports the following base types:

  + Natural numbers
  + Booleans
  + Strings
  + Characters

  and the following primitive operations on these base types:

  + on Strings:
    + String length
    + Packing and unpacking strings to lists

  + on characters:
    + converting to their ordinal value
    + converting an ordinal value to its char equivalent

  + on natural numbers
    + less than
    + addition
    + subtraction

  + on booleans
    + conjunction
    + disjunction including and exclusive

  By design Olaf does not provide an exhaustive set of primitive operations as they can be realised from the presented primitives.
  We could provide Natural numbers in their peano representation but that feels like a step too far.

  Olaf also supports the following extensions:

  + Non-derived Let bindings
  + General Recursion
  + Product types with matching
  + Sum types with matching on sums
  + 'Cons'-style lists with matching on empty and cons cases

 Programs in Olaf are defined as a sequence of global declarations, followed by a single expression to run.

* Implementation

  Olaf is implemented in Idris.

  We provide:

  1. a simple API to write Olaf programs as an EDSL in Idris itself;
  1. a simple parser to to read concrete Olaf programs;
  1. a well-typed interpreter to convert Olaf programs to valid Idris programs;
     the interpreter works for Olaf programs written as an EDSL, and only for expressions written in concrete Olaf syntax;
  1. a verified evaluator to run Olaf programs and produce Olaf values; and
  1. ...
