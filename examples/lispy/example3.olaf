(def [xs : (List Nat)]
     (extend 1
     (extend 2 empty[Nat])))

(def [myAdd : (Nat -> (Nat -> Nat))]
     (fun ([x : Nat]
           [y : Nat])
          (add x y)))

(def rec [foldr : ((Nat -> (Nat -> Nat)) -> (Nat -> ((List Nat) -> Nat)))]
         (fun ([f   : (Nat -> (Nat -> Nat))]
               [acc : Nat]
               [xs  : (List Nat)])
              (match xs
                     [empty acc]
                     [(extend y ys) ((f y) (((foldr f) acc) ys))])))

(main
  (((foldr myAdd) 3) xs))
