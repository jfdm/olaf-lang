def xs : (List Nat) :=
  (extend 1
          (extend 2
                  empty[Nat]))

def temp : (List Nat) := let ys : (List Nat) := xs in ys

def double : (Nat -> Nat) := (fun x : Nat => (add x x))


def rec map : ((Nat -> Nat) -> ((List Nat) -> (List Nat))) :=
  (fun f : (Nat -> Nat), xs : (List Nat)
     => match xs as
         { empty       => empty[Nat]
         | extend y ys => let zs : (List Nat) := (apply (apply map f) ys)
                          in (extend (apply f y) zs)
         }
  )


main := (apply (apply map double) xs)
